/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.johan.csg.attendance.register.api;

import io.swagger.annotations.*;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.johan.csg.attendance.register.api.model.*;
import org.johan.csg.attendance.register.api.service.LookupService;
import org.johan.csg.attendance.register.api.service.StudentService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@Slf4j
@RestController
@ApiResponses({
        @ApiResponse(code = 400, message = "Bad request"),
        @ApiResponse(code = 500, message = "Internal error")
})
@RequiredArgsConstructor
@CrossOrigin(origins = "http://localhost:8080")
@Api(value = "Lookup")
public class LookupApi {

    private final LookupService lookupService;

    /**
     * POST /student : returns List of holidays
     * This can only be done by the logged in user.
     *
     * @return successful operation (status code 200)
     */
    @ApiOperation(value = "Fetch holidays", nickname = "fetchHolidays", notes = "This can only be done by the logged in user.", tags = {"lookup-api",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation")})
    @RequestMapping(value = "/lookup/holidays",
            method = RequestMethod.GET)
    ResponseEntity<RestApiResultHolidays> fetchHolidays() {
        return new ResponseEntity<>(lookupService.fetchHolidays(), HttpStatus.OK);
    }

    /**
     * POST /student : returns List of Religions
     * This can only be done by the logged in user.
     *
     * @return successful operation (status code 200)
     */
    @ApiOperation(value = "Fetch religions", nickname = "fetchReligions", notes = "This can only be done by the logged in user.", tags = {"lookup-api",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation")})
    @RequestMapping(value = "/lookup/religions",
            method = RequestMethod.GET)
    ResponseEntity<RestApiResultReligions> fetchReligions() {
        return new ResponseEntity<>(lookupService.fetchReligions(), HttpStatus.OK);
    }

    /**
     * GET /lookup/terms : returns List of Terms
     * This can only be done by the logged in user.
     *
     * @return successful operation (status code 200)
     */
    @ApiOperation(value = "Fetch terms", nickname = "fetchTerms", notes = "This can only be done by the logged in user.", tags = {"lookup-api",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation")})
    @RequestMapping(value = "/lookup/terms",
            method = RequestMethod.GET)
    ResponseEntity<RestApiResultTerms> fetchTerms() {
        return new ResponseEntity<>(lookupService.fetchTerms(), HttpStatus.OK);
    }

    /**
     * GET /lookup/classRooms : returns List of ClassRooms
     * This can only be done by the logged in user.
     *
     * @return successful operation (status code 200)
     */
    @ApiOperation(value = "Fetch classrooms", nickname = "fetchClassRooms", notes = "This can only be done by the logged in user.", tags = {"lookup-api",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation")})
    @RequestMapping(value = "/lookup/classRooms",
            method = RequestMethod.GET)
    ResponseEntity<RestApiResultClassRooms> fetchClassRooms() {
        return new ResponseEntity<>(lookupService.fetchClassRooms(), HttpStatus.OK);
    }

}
