/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.johan.csg.attendance.register.api;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.johan.csg.attendance.register.api.model.RestApiResultStudent;
import org.johan.csg.attendance.register.api.model.Student;
import io.swagger.annotations.*;
import org.johan.csg.attendance.register.api.model.StudentQueryFilter;
import org.johan.csg.attendance.register.api.model.StudentQueryResponse;
import org.johan.csg.attendance.register.api.service.StudentService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Slf4j
@RestController
@ApiResponses({
        @ApiResponse(code = 400, message = "Bad request"),
        @ApiResponse(code = 500, message = "Internal error")
})
@RequiredArgsConstructor
@CrossOrigin(origins = "http://localhost:8080")
@Api(value = "Student")
public class StudentApi {

    private final StudentService studentService;

    /**
     * POST /student : Create student
     * This can only be done by the logged in user.
     *
     * @param student (required)
     * @return successful operation (status code 200)
     */
    @ApiOperation(value = "Create student", nickname = "createStudent", notes = "This can only be done by the logged in user.", tags = {"student-api",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation")})
    @RequestMapping(value = "/student",
            consumes = "application/json",
            method = RequestMethod.POST)
    ResponseEntity<RestApiResultStudent> createStudent(@ApiParam(value = "", required = true) @RequestBody Student student) {
        return new ResponseEntity<>(studentService.saveStudent(student), HttpStatus.OK);
    }


    /**
     * GET /student/{id} : Get student by id
     *
     * @param id Id of student to fetch (required)
     * @return successful operation (status code 200)
     * or Invalid student id supplied (status code 400)
     * or Student not found (status code 404)
     */
    @ApiOperation(value = "Get student by id", nickname = "getStudentById", notes = "", response = Student.class, tags = {"student-api",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = Student.class),
            @ApiResponse(code = 400, message = "Invalid student id supplied"),
            @ApiResponse(code = 404, message = "Student not found")})
    @RequestMapping(value = "/student/{id}",
            produces = "application/json",
            method = RequestMethod.GET)
    ResponseEntity<RestApiResultStudent> getStudentById(@ApiParam(value = "Id of student to fetch", required = true) @PathVariable("id") Long id) {
        return new ResponseEntity<>(studentService.getStudentById(id), HttpStatus.OK);
    }


    /**
     * PUT /student/{id} : Update student
     * This can only be done by the logged in user.
     *
     * @param id      Id of student to update (required)
     * @param student (required)
     * @return Invalid student id supplied (status code 400)
     * or Student not found (status code 404)
     */
    @ApiOperation(value = "Update student", nickname = "updateStudent", notes = "This can only be done by the logged in user.", tags = {"student-api",})
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "Invalid student id supplied"),
            @ApiResponse(code = 404, message = "Student not found")})
    @RequestMapping(value = "/student/{id}",
            consumes = "application/json",
            method = RequestMethod.PUT)
    ResponseEntity<Void> updateStudent(@ApiParam(value = "Id of student to update", required = true) @PathVariable("id") Long id, @ApiParam(value = "", required = true) @RequestBody Student student) {
        studentService.updateStudent(student);
        return new ResponseEntity<>(HttpStatus.OK);
    }

    /**
     * POST /student : Create student
     * This can only be done by the logged in user.
     *
     * @param filter (required)
     * @return successful operation (status code 200)
     */
    @ApiOperation(value = "Fetch students by filter", nickname = "fetchStudentsByFilter", notes = "This can only be done by the logged in user.", tags = {"student-api",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation")})
    @RequestMapping(value = "/students",
            method = RequestMethod.POST)
    ResponseEntity<StudentQueryResponse> fetchStudentByFilter(@ApiParam(value = "", required = true) @RequestBody StudentQueryFilter filter) {
        ResponseEntity<StudentQueryResponse> res = new ResponseEntity<>(studentService.fetchStudentByFilter(filter), HttpStatus.OK);
        return res;
    }

}
