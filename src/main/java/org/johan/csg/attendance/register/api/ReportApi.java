/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.johan.csg.attendance.register.api;

import io.swagger.annotations.*;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.johan.csg.attendance.register.api.model.AttendanceRegisterRequest;
import org.johan.csg.attendance.register.api.model.AttendanceRegisterResponse;
import org.johan.csg.attendance.register.api.model.ReportDailyFilter;
import org.johan.csg.attendance.register.api.model.ReportTermFilter;
import org.johan.csg.attendance.register.api.service.AttendanceService;
import org.johan.csg.attendance.register.api.service.ReportService;
import org.springframework.core.io.InputStreamResource;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.time.LocalDate;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;


@Slf4j
@RestController
@ApiResponses({
        @ApiResponse(code = 400, message = "Bad request"),
        @ApiResponse(code = 500, message = "Internal error")
})
@RequiredArgsConstructor
@CrossOrigin(origins = "http://localhost:8080")
@Api(value = "Report")
public class ReportApi {

    private final ReportService reportService;

    /**
     * POST /report/daily/ : Student attendance per day
     * This can only be done by the logged in user.
     *
     * @param filter (required)
     * @return successful operation (status code 200)
     */
    @ApiOperation(value = "Get attendance register per date", nickname = "getDailyAttendanceRegisterReport", notes = "Filter by classroom, status and date.\n If date is null it will default to today's date.", tags = {"report-api",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation")})
    @RequestMapping(value = "/report/daily/",
            method = RequestMethod.POST)
    ResponseEntity<Resource> getDailyAttendanceRegisterReport(@ApiParam(value = "Report filter criteria", required = true) @RequestBody ReportDailyFilter filter) throws DocumentException {


        ResponseEntity<Resource> response = new ResponseEntity<Resource>(
                reportService.reportDaily(filter), getReportHeaders("AttendanceRegister.pdf"),
                HttpStatus.OK);

        return response;
    }


    /**
     * POST /report/term : Student attendance per term
     * This can only be done by the logged in user.
     *
     * @param filter (required)
     * @return successful operation (status code 200)
     * or successful operation (status code 200)
     */
    @ApiOperation(value = "Record student attendance", nickname = "getTermAttendanceRegisterReport", notes = "Filter by classroom and term.\n If term is null it will default to the current or last term", response = AttendanceRegisterResponse.class, responseContainer = "List", tags = {"report-api",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = AttendanceRegisterResponse.class, responseContainer = "List"),
            @ApiResponse(code = 200, message = "successful operation")})
    @RequestMapping(value = "/report/term",
            method = RequestMethod.POST)
    ResponseEntity<Resource> getTermAttendanceRegisterReport(@ApiParam(value = "", required = true) @RequestBody ReportTermFilter filter) throws DocumentException {
        ResponseEntity<Resource> response = new ResponseEntity<Resource>(
                reportService.reportTerm(filter), getReportHeaders("TermAttendanceRegister.pdf"),
                HttpStatus.OK);
        return response;
    }

    private HttpHeaders getReportHeaders(String reportTitle) {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.parseMediaType("application/pdf"));
        headers.setCacheControl("must-revalidate, post-check=0, pre-check=0");
        headers.set(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=" + reportTitle);
        return headers;
    }

}
